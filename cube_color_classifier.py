# cube_color_classifier.py

import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from collections import Counter

class CubeColorClassifier:
    def __init__(self):
        
        # --- 1. Define separate data arrays (X_color) ---
        # NOTE: I am using the data counts from your previous attempt, 
        # which had an inconsistent number of samples (192) vs. labels (206).
        # You should verify these arrays have ALL your collected data points.

        # 48 Red samples
        self.red_X = np.array([
            [130, 60, 136], [140, 79, 114], [131, 73, 126], [132, 50, 143],
            [140, 73, 122], [136, 74, 124], [140, 67, 131], [151, 86, 110],
            [147, 86, 111], [125, 53, 155], [140, 79, 120], [137, 83, 119],
            [127, 57, 140], [138, 75, 119], [130, 67, 118], [135, 70, 133],
            [142, 82, 113], [135, 78, 118], [122, 49, 158], [136, 79, 123],
            [129, 74, 123], [127, 57, 139], [138, 76, 118], [132, 67, 117],
            [135, 69, 132], [142, 82, 112], [134, 78, 118], [121, 49, 158],
            [135, 80, 122], [128, 75, 123], [127, 55, 140], [140, 75, 118],
            [134, 66, 114], [135, 68, 134], [141, 80, 114], [134, 76, 118],
            [121, 48, 158], [135, 79, 123], [127, 71, 123], [123, 52, 141],
            [138, 73, 118], [131, 67, 120], [134, 66, 133], [140, 81, 116],
            [134, 75, 121], [120, 46, 160], [134, 77, 125], [129, 71, 129],
        ])

        # 44 Orange samples
        self.orange_X = np.array([
            [147, 72, 151], [154, 74, 146], [161, 85, 115], [146, 70, 165],
            [155, 75, 147], [156, 77, 131], [146, 67, 158], [148, 71, 143],
            [160, 77, 118], [146, 72, 157], [152, 75, 152], [160, 91, 114],
            [148, 71, 166], [152, 76, 155], [157, 79, 130], [148, 70, 158],
            [154, 73, 147], [163, 77, 116], [150, 73, 144], [158, 79, 144],
            [158, 88, 119], [147, 72, 171], [154, 79, 151], [154, 77, 143],
            [139, 71, 167], [148, 74, 151], [150, 72, 138], [145, 67, 137],
            [159, 83, 141], [141, 71, 170], [155, 81, 152], [154, 76, 145],
            [133, 67, 166], [150, 77, 151], [148, 74, 139], [147, 68, 140],
            [158, 83, 142], [141, 71, 171], [155, 80, 152], [152, 75, 146],
            [137, 69, 166], [150, 77, 152], [148, 74, 140],
        ])

        # 60 Yellow samples
        self.yellow_X = np.array([
            [60, 49, 177], [57, 51, 166], [58, 53, 151], [58, 51, 184],
            [55, 56, 170], [59, 55, 160], [60, 50, 184], [56, 56, 168],
            [62, 57, 158], [60, 50, 176], [56, 53, 167], [57, 53, 151],
            [59, 51, 185], [55, 58, 172], [59, 55, 162], [61, 50, 185],
            [56, 57, 170], [63, 56, 159], [61, 48, 181], [56, 52, 172],
            [58, 54, 153], [58, 52, 189], [54, 58, 176], [58, 57, 163],
            [58, 51, 190], [55, 58, 174], [61, 58, 161], [60, 47, 186],
            [56, 52, 176], [60, 55, 149], [57, 52, 191], [55, 57, 178],
            [62, 58, 159], [58, 51, 192], [55, 57, 178], [64, 58, 158],
            [61, 48, 185], [56, 53, 177], [55, 54, 167], [57, 53, 193],
            [54, 59, 182], [55, 58, 173], [58, 52, 197], [53, 60, 180],
            [55, 60, 173], [62, 49, 181], [56, 53, 173], [57, 54, 161],
            [58, 52, 191], [54, 58, 180], [56, 56, 171], [58, 52, 195],
            [54, 59, 178], [58, 58, 171],
        ])

        self.blue_X = np.array([
            [99, 84, 151], [101, 99, 129], [99, 85, 132], [98, 98, 141],
            [100, 113, 122], [100, 104, 125], [96, 76, 162], [100, 113, 124],
            [97, 96, 135], [100, 80, 150], [103, 97, 129], [101, 84, 130],
            [97, 96, 145], [100, 110, 125], [99, 100, 128], [96, 73, 166],
            [99, 110, 126], [97, 91, 138], [93, 66, 141], [106, 89, 139],
            [101, 84, 138], [98, 97, 146], [97, 86, 153], [102, 75, 142],
            [107, 90, 125], [107, 84, 107], [97, 90, 143], [101, 101, 123],
            [105, 92, 115], [101, 95, 126], [105, 80, 114], [105, 77, 127],
            [107, 89, 110], [116, 90, 79], [98, 89, 131], [101, 100, 114],
            [115, 90, 97], [96, 73, 143], [104, 88, 117], [118, 77, 94],
            [103, 77, 149], [106, 94, 130], [102, 86, 126], [93, 88, 155], 
            [99, 105, 131], [99, 96, 133], [95, 73, 165], [98, 98, 138], 
            [97, 88, 141], [100, 75, 146], [104, 91, 129], [101, 82, 124], 
            [89, 86, 154], [98, 100, 131], [96, 84, 136], [93, 76, 161], 
            [96, 95, 135], [94, 81, 138], [98, 74, 143], [103, 90, 125], 
            [104, 82, 117], [88, 85, 155], [97, 98, 131], [98, 89, 133], 
            [89, 74, 162], [96, 86, 139], [92, 74, 139], [99, 74, 143], 
            [102, 90, 125], [104, 82, 117], [87, 85, 155], [97, 99, 131], 
            [96, 88, 132], [89, 74, 163], [96, 85, 140], [90, 74, 139], 
            [101, 72, 153], [105, 89, 130], [107, 84, 116], [94, 83, 154], 
            [99, 97, 134], [103, 87, 130], [95, 70, 163], [98, 91, 139], 
            [100, 78, 131], [101, 74, 148], [103, 90, 128], [105, 84, 117], 
            [90, 85, 156], [98, 99, 133], [101, 88, 133], [95, 73, 164], 
            [97, 93, 138], [98, 80, 135]
        ])

        self.green_X = np.array([
            [75, 80, 177], [73, 85, 164], [75, 85, 153], [74, 81, 178],
            [74, 91, 165], [75, 87, 157], [75, 77, 180], [73, 85, 164],
            [76, 86, 151], [75, 75, 170], [75, 83, 160], [75, 83, 149],
            [76, 79, 181], [74, 90, 163], [74, 84, 159], [76, 79, 181],
            [74, 87, 165], [74, 85, 156], [75, 74, 166], [76, 82, 153],
            [78, 79, 138], [75, 78, 177], [74, 88, 160], [77, 81, 154],
            [75, 77, 177], [74, 81, 162], [79, 81, 150], [78, 71, 169],
            [76, 78, 158], [81, 77, 142], [79, 73, 182], [75, 84, 164],
            [80, 79, 156], [82, 71, 181], [75, 76, 165], [83, 76, 153],
            [80, 64, 176], [78, 75, 166], [83, 78, 140], [81, 69, 193],
            [75, 83, 177], [81, 81, 163], [83, 66, 195], [75, 79, 178],
            [83, 82, 160], [79, 74, 159], [76, 79, 146], [81, 78, 130],
            [79, 77, 168], [74, 84, 148], [81, 76, 142], [79, 75, 168],
            [73, 78, 149], [83, 76, 132], [74, 83, 175], [74, 86, 166],
            [74, 93, 164], [74, 91, 154], [74, 81, 180], [74, 88, 165], 
            [73, 91, 151], [74, 81, 174], [73, 85, 167], [75, 87, 145], 
            [74, 80, 180], [74, 92, 167], [75, 88, 156], [74, 84, 180], 
            [74, 90, 166], [76, 92, 151], [74, 79, 173], [74, 86, 162], 
            [75, 87, 148], [74, 81, 180], [73, 93, 166], [74, 90, 162], 
            [74, 84, 180], [74, 91, 165], [74, 91, 159], [74, 71, 154], 
            [76, 79, 143], [88, 85, 107], [74, 82, 162], [74, 87, 152], 
            [86, 84, 131], [74, 81, 166], [74, 80, 153], [85, 76, 132], 
            [74, 73, 159], [76, 79, 147], [81, 81, 123], [74, 83, 165], 
            [74, 89, 153], [76, 80, 145], [73, 85, 168], [73, 88, 153], 
            [75, 83, 141], [74, 69, 160], [77, 78, 144], [81, 77, 128], 
            [75, 82, 172], [74, 89, 155], [74, 83, 150], [75, 85, 174], 
            [73, 89, 156], [73, 87, 146], [73, 89, 148], [74, 82, 176],
        ])
        
        self.white_X = np.array([
            # 54 Samples from PREVIOUS White input:
            [95, 27, 167], [94, 29, 161], [93, 28, 151], [91, 28, 182],
            [89, 28, 156], [91, 27, 158], [92, 27, 179], [90, 28, 163],
            [89, 27, 156], [95, 26, 170], [96, 28, 160], [94, 28, 146],
            [91, 28, 183], [89, 28, 158], [92, 25, 161], [91, 27, 182],
            [90, 27, 167], [93, 26, 154], [97, 25, 171], [96, 28, 162],
            [95, 27, 149], [92, 27, 184], [89, 28, 158], [90, 26, 161],
            [93, 26, 181], [90, 27, 167], [92, 26, 156], [96, 25, 174],
            [96, 28, 163], [93, 27, 150], [91, 28, 184], [89, 28, 159],
            [91, 26, 159], [92, 26, 182], [90, 27, 169], [92, 27, 153],
            [96, 26, 170], [96, 28, 162], [93, 27, 148], [93, 27, 184],
            [89, 28, 159], [91, 26, 161], [92, 26, 182], [90, 27, 168],
            [91, 26, 156], [94, 26, 176], [93, 27, 167], [95, 26, 151],
            [91, 28, 183], [89, 28, 159], [95, 27, 156], [92, 26, 180],
            [91, 26, 167], [95, 27, 148],
            
            # 54 Samples from NEW White input:
            [97, 26, 156], [99, 30, 141], [105, 36, 116], [92, 30, 166],
            [91, 33, 138], [101, 32, 133], [92, 26, 162], [93, 29, 143],
            [106, 32, 120], [106, 24, 152], [104, 31, 136], [101, 31, 118],
            [96, 26, 169], [92, 28, 141], [94, 27, 143], [94, 25, 167],
            [91, 27, 148], [93, 26, 141], [97, 25, 155], [99, 30, 139],
            [101, 31, 119], [90, 27, 166], [90, 31, 139], [97, 27, 138],
            [90, 25, 165], [90, 28, 146], [96, 26, 134], [104, 23, 149],
            [102, 30, 134], [101, 32, 115], [89, 24, 169], [90, 30, 141],
            [94, 27, 140], [92, 24, 166], [90, 28, 147], [94, 27, 137],
            [93, 26, 159], [95, 28, 145], [99, 29, 127], [90, 27, 166],
            [90, 31, 140], [97, 28, 141], [91, 25, 164], [90, 27, 146],
            [96, 27, 132], [99, 25, 155], [98, 29, 139], [100, 33, 119],
            [92, 26, 168], [90, 30, 140], [96, 29, 140], [90, 25, 166],
            [90, 28, 147], [97, 27, 136]
        ])

        # --- 2. Concatenate data and create labels automatically ---
        
        # Combine all X data arrays
        self.X = np.concatenate([
            self.red_X,
            self.orange_X,
            self.yellow_X,
            self.blue_X,
            self.green_X, # Must be included even if empty
            self.white_X  # Must be included even if empty
        ])

        # Create the Y labels using the actual length of each X array
        self.y = np.concatenate([
            np.array(['R'] * len(self.red_X)),
            np.array(['O'] * len(self.orange_X)),
            np.array(['Y'] * len(self.yellow_X)),
            np.array(['B'] * len(self.blue_X)),
            np.array(['G'] * len(self.green_X)),
            np.array(['W'] * len(self.white_X))
        ])

        # This check is now guaranteed to pass: len(self.X) == len(self.y)
        print(f"Classifier trained with {len(self.X)} total samples.")

        # --- 3. Train the classifier ---

        # Normalize HSV values
        self.X_norm = self.X.astype(float)
        self.X_norm[:, 0] /= 180.0  # Hue (0-180)
        self.X_norm[:, 1] /= 255.0  # Saturation (0-255)
        self.X_norm[:, 2] /= 255.0  # Value (0-255)

        # Initialize and train KNN classifier
        self.knn = KNeighborsClassifier(n_neighbors=3, weights='distance')
        self.knn.fit(self.X_norm, self.y)

    def predict_color(self, hsv):
        """Predict single sticker color"""
        hsv_array = np.array(hsv).reshape(1, -1).astype(float)
        
        # Normalize the input in the same way the training data was normalized
        hsv_array[:, 0] /= 180.0
        hsv_array[:, 1] /= 255.0
        hsv_array[:, 2] /= 255.0
        
        # FIX 3: Ensure this method runs the actual prediction.
        return self.knn.predict(hsv_array)[0]

    def predict_face(self, hsv_face):
        """
        Predict entire face color matrix and perform a center-based majority vote correction.
        hsv_face: 3x3 list of HSV values
        Returns 3x3 list of color letters.
        """
        predicted_face = []
        for row in hsv_face:
            predicted_row = []
            for hsv in row:
                predicted_row.append(self.predict_color(hsv))
            predicted_face.append(predicted_row)

        # Correction Logic: Use the center sticker's predicted color 
        # as the true face color for maximum reliability.
        center_color = predicted_face[1][1]

        # Correct all other colors to match the center color.
        # This is the most reliable way to enforce that all stickers on one face 
        # MUST be the same color (except the center, which identifies the face).
        for i in range(3):
            for j in range(3):
                # We skip the center (1, 1) because it's already correct.
                # However, forcing everything to the center color is safer for solving.
                predicted_face[i][j] = center_color

        return predicted_face

# Example usage
if __name__ == "__main__":
    classifier = CubeColorClassifier()

    # Example single sticker (Should predict 'R' based on your samples)
    hsv_sample = [132, 65, 140]
    print("Predicted color (Single Sticker):", classifier.predict_color(hsv_sample))

    # Example face (3x3) - All samples are close to your Red samples
    hsv_face = [
        [[132, 65, 140], [140, 70, 130], [135, 68, 138]],
        [[138, 72, 135], [133, 66, 142], [136, 70, 136]], # Center: [133, 66, 142]
        [[130, 63, 140], [137, 69, 138], [134, 67, 139]]
    ]
    predicted_face = classifier.predict_face(hsv_face)
    print("\nPredicted Face (3x3):")
    for row in predicted_face:
        print(row)