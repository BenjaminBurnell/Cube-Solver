# cube_color_classifier.py
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from collections import Counter

class CubeColorClassifier:
    def __init__(self):
        
        # 1. Define separate data arrays (X_color)

        self.red_X = np.array([
            [143, 60, 144], [144, 68, 144], [136, 59, 147], [145, 72, 143],
            [148, 79, 134], [142, 68, 141], [136, 57, 143], [142, 75, 131],
            [138, 64, 136], [148, 61, 151], [145, 70, 144], [139, 64, 133],
            [144, 77, 141], [148, 84, 132], [145, 71, 135], [134, 58, 154],
            [142, 79, 139], [138, 67, 138], [141, 59, 153], [144, 69, 140],
            [136, 57, 152], [144, 74, 137], [148, 81, 130], [142, 68, 139],
            [135, 56, 149], [145, 75, 132], [138, 64, 137], [142, 60, 151],
            [143, 69, 142], [137, 59, 146], [145, 74, 136], [148, 82, 129],
            [145, 69, 134], [135, 55, 152], [142, 76, 137], [139, 64, 137],
            [142, 61, 151], [143, 70, 144], [136, 61, 143], [143, 74, 139],
            [148, 83, 132], [144, 70, 136], [132, 55, 154], [141, 77, 140],
            [137, 66, 140], [149, 56, 144], [145, 63, 147], [137, 54, 150],
            [145, 67, 145], [149, 75, 135], [142, 63, 147], [133, 50, 154],
            [124, 52, 158], [135, 71, 129], [131, 65, 117], [133, 65, 148], 
            [137, 74, 129], [142, 74, 110], [120, 53, 173], [129, 70, 137], 
            [131, 64, 116], [123, 52, 158], [137, 71, 125], [135, 67, 148], 
            [140, 75, 127], [136, 67, 125], [132, 74, 136], [125, 66, 136], 
            [123, 51, 162], [135, 69, 132], [132, 67, 115], [134, 65, 150], 
            [139, 73, 131], [138, 71, 119], [131, 69, 139], [124, 63, 129], 
            [124, 52, 164], [133, 70, 137], [131, 67, 120], [135, 64, 150], 
            [140, 72, 132], [140, 72, 119], [131, 71, 140], [127, 64, 128], 
            [124, 52, 166], [133, 70, 138], [131, 69, 118], [133, 64, 153], 
            [138, 72, 133], [139, 72, 119], [131, 72, 140], [127, 65, 128], 
            [125, 50, 164], [135, 68, 134], [129, 61, 133], [139, 63, 151], 
            [141, 71, 131], [135, 65, 130], [133, 71, 139], [126, 63, 142],
            [128, 56, 160], [134, 71, 138], [130, 67, 126], [134, 61, 157],
            [138, 79, 137], [135, 75, 121], [120, 55, 174], [132, 77, 144],
            [125, 73, 130], [128, 48, 164], [141, 72, 129], [131, 70, 138],
            [135, 63, 155], [143, 82, 128], [141, 81, 129], [119, 52, 175],
            [133, 75, 138], [126, 76, 143], [125, 67, 167], [134, 87, 136],
            [128, 78, 143], [135, 81, 150], [138, 92, 128], [114, 60, 171],
            [132, 84, 131], [120, 73, 128], [135, 88, 152], [138, 101, 131],
            [134, 91, 142], [126, 82, 150], [134, 84, 154], [140, 95, 133],
            [133, 89, 135], [118, 64, 176], [137, 92, 141], [137, 84, 152],
            [141, 99, 130], [134, 90, 134], [118, 65, 180], [142, 71, 142],
            [126, 53, 150], [129, 65, 139], [131, 57, 142], [128, 72, 129],
            [117, 54, 147], [128, 65, 131], [132, 71, 155], [138, 79, 136],
            [123, 76, 143], [137, 75, 139], [145, 89, 123], [137, 83, 131],
            [126, 72, 147], [132, 90, 125], [135, 60, 144], [135, 72, 127],
            [134, 65, 135], [144, 82, 115], [120, 77, 121], [119, 64, 141],
            [125, 82, 116], [124, 73, 123], [119, 47, 145], [124, 55, 141],
            [118, 49, 149], [127, 57, 135], [121, 72, 119], [112, 51, 137],
            [125, 49, 148], [121, 60, 131], [131, 56, 134], [138, 71, 117],
            [116, 50, 136], [135, 59, 156],
        ])
                
        self.orange_X = np.array([
            [137, 69, 166], [150, 77, 152], [148, 74, 140],
            [64, 121, 173], [61, 122, 169], [62, 116, 179],
            [58, 121, 177], [54, 125, 171], [60, 119, 175],
            [59, 112, 171], [57, 127, 168], [59, 126, 162],
            [66, 120, 177], [60, 119, 174], [63, 118, 180],
            [61, 114, 173], [55, 128, 170], [61, 112, 177],
            [61, 119, 177], [59, 139, 173], [61, 120, 178],
            [66, 119, 177], [63, 120, 172], [64, 115, 179],
            [60, 116, 174], [57, 126, 171], [62, 120, 173],
            [60, 115, 177], [58, 125, 174], [61, 123, 176],
            [70, 119, 176], [66, 121, 172], [70, 115, 180],
            [61, 117, 175], [58, 126, 170], [63, 121, 173],
            [61, 113, 176], [61, 128, 174], [62, 123, 169],
            [70, 123, 176], [68, 122, 171], [69, 117, 180],
            [65, 121, 176], [59, 128, 171], [64, 116, 173],
            [64, 115, 172], [62, 135, 170], [66, 121, 164],
            [71, 117, 177], [66, 122, 172], [70, 117, 181],
            [62, 121, 180], [60, 128, 174], [66, 117, 176],
            [66, 113, 165], [63, 135, 161], [67, 125, 155],
            [65, 116, 181], [63, 115, 183], [65, 120, 178],
            [63, 102, 184], [63, 113, 182], [65, 120, 180], 
            [66, 113, 176], [66, 114, 181], [61, 110, 177], 
            [64, 109, 180], [65, 113, 176], [64, 112, 184],
            [65, 115, 183], [66, 114, 177], [60, 118, 179],
            [64, 113, 183], [66, 106, 182], [64, 107, 182],
            [61, 116, 182], [66, 112, 176], [61, 118, 179],
            [62, 106, 176], [57, 117, 180], [64, 104, 183],
            [66, 115, 183], [70, 112, 179], [64, 115, 181],
            [62, 105, 177], [64, 108, 185], [63, 110, 181],
            [70, 112, 183], [69, 114, 183], [65, 108, 180], 
            [65, 115, 183], [71,  93, 186], [63, 112, 184],
            [63, 107, 181], [84,  91, 189], [74,  94, 188],
            [78, 94, 188], [79,  92, 190], [88, 91, 190], 
            [89, 87, 190]
        ])

        self.yellow_X = np.array([
            [60, 49, 177], [57, 51, 166], [58, 53, 151], [58, 51, 184],
            [55, 56, 170], [59, 55, 160], [60, 50, 184], [56, 56, 168],
            [62, 57, 158], [60, 50, 176], [56, 53, 167], [57, 53, 151],
            [59, 51, 185], [55, 58, 172], [59, 55, 162], [61, 50, 185],
            [56, 57, 170], [63, 56, 159], [61, 48, 181], [56, 52, 172],
            [58, 54, 153], [58, 52, 189], [54, 58, 176], [58, 57, 163],
            [58, 51, 190], [55, 58, 174], [61, 58, 161], [60, 47, 186],
            [56, 52, 176], [60, 55, 149], [57, 52, 191], [55, 57, 178],
            [62, 58, 159], [58, 51, 192], [55, 57, 178], [64, 58, 158],
            [61, 48, 185], [56, 53, 177], [55, 54, 167], [57, 53, 193],
            [54, 59, 182], [55, 58, 173], [58, 52, 197], [53, 60, 180],
            [55, 60, 173], [62, 49, 181], [56, 53, 173], [57, 54, 161],
            [58, 52, 191], [54, 58, 180], [56, 56, 171], [58, 52, 195],
            [54, 59, 178], [58, 58, 171],
        ])

        self.blue_X = np.array([
            [99, 84, 151], [101, 99, 129], [99, 85, 132], [98, 98, 141], [100, 113, 122], [100, 104, 125],
            [96, 76, 162], [100, 113, 124], [97, 96, 135], [100, 80, 150], [103, 97, 129], [101, 84, 130],
            [97, 96, 145], [100, 110, 125], [99, 100, 128], [96, 73, 166], [99, 110, 126], [97, 91, 138],
            [93, 66, 141], [106, 89, 139], [101, 84, 138], [98, 97, 146], [97, 86, 153], [102, 75, 142],
            [107, 90, 125], [107, 84, 107], [97, 90, 143], [101, 101, 123], [105, 92, 115], [101, 95, 126],
            [105, 80, 114], [105, 77, 127], [107, 89, 110], [116, 90, 79], [98, 89, 131], [101, 100, 114],
            [115, 90, 97], [96, 73, 143], [104, 88, 117], [118, 77, 94], [103, 77, 149], [106, 94, 130],
            [102, 86, 126], [93, 88, 155], [99, 105, 131], [99, 96, 133], [95, 73, 165], [98, 98, 138],
            [97, 88, 141], [100, 75, 146], [104, 91, 129], [101, 82, 124], [89, 86, 154], [98, 100, 131],
            [96, 84, 136], [93, 76, 161], [96, 95, 135], [94, 81, 138], [98, 74, 143], [103, 90, 125],
            [104, 82, 117], [88, 85, 155], [97, 98, 131], [98, 89, 133], [89, 74, 162], [96, 86, 139],
            [92, 74, 139], [99, 74, 143], [102, 90, 125], [104, 82, 117], [87, 85, 155], [97, 99, 131],
            [96, 88, 132], [89, 74, 163], [96, 85, 140], [90, 74, 139], [101, 72, 153], [105, 89, 130],
            [107, 84, 116], [94, 83, 154], [99, 97, 134], [103, 87, 130], [95, 70, 163], [98, 91, 139],
            [100, 78, 131], [101, 74, 148], [103, 90, 128], [105, 84, 117], [90, 85, 156], [98, 99, 133],
            [122, 99, 142], [119, 117, 131], [119, 101, 130], [113, 107, 143], [116, 132, 126], [120, 118, 124],
            [112, 86, 155], [114, 121, 130], [119, 101, 130], [113, 98, 133], [118, 114, 133], [116, 97, 138],
            [113, 107, 143], [115, 130, 126], [114, 108, 138], [110, 87, 150], [114, 124, 130], [113, 92, 145],
            [120, 96, 145], [118, 112, 134], [118, 99, 127], [112, 102, 147], [115, 126, 129], [119, 109, 125],
            [112, 85, 158], [113, 117, 134], [119, 94, 132], [118, 92, 139], [120, 109, 132], [117, 93, 138],
            [113, 93, 152], [116, 124, 129], [115, 108, 137], [108, 82, 162], [114, 115, 139], [113, 92, 151],
            [120, 90, 144], [120, 103, 133], [121, 93, 115], [111, 85, 156], [115, 116, 134], [119, 99, 123],
            [110, 83, 166], [113, 112, 143], [119, 92, 131], [115, 93, 142], [119, 109, 134], [116, 92, 143],
            [111, 88, 155], [116, 125, 129], [114, 102, 141], [108, 77, 167], [114, 120, 135], [112, 93, 151],
            [101, 88, 133], [95, 73, 164], [97, 93, 138], [98, 80, 135],
        ])

        self.green_X = np.array([
            [75, 80, 177], [73, 85, 164], [75, 85, 153], [74, 81, 178], [74, 91, 165], [75, 87, 157],
            [75, 77, 180], [73, 85, 164], [76, 86, 151], [75, 75, 170], [75, 83, 160], [75, 83, 149],
            [76, 79, 181], [74, 90, 163], [74, 84, 159], [76, 79, 181], [74, 87, 165], [74, 85, 156],
            [75, 74, 166], [76, 82, 153], [78, 79, 138], [75, 78, 177], [74, 88, 160], [77, 81, 154],
            [75, 77, 177], [74, 81, 162], [79, 81, 150], [78, 71, 169], [76, 78, 158], [81, 77, 142],
            [79, 73, 182], [75, 84, 164], [80, 79, 156], [82, 71, 181], [75, 76, 165], [83, 76, 153],
            [80, 64, 176], [78, 75, 166], [83, 78, 140], [81, 69, 193], [75, 83, 177], [81, 81, 163],
            [83, 66, 195], [75, 79, 178], [83, 82, 160], [79, 74, 159], [76, 79, 146], [81, 78, 130],
            [79, 77, 168], [74, 84, 148], [81, 76, 142], [79, 75, 168], [73, 78, 149], [83, 76, 132],
            [74, 83, 175], [74, 86, 166], [73, 89, 148], [74, 82, 176], [74, 93, 164], [74, 91, 154],
            [74, 81, 180], [74, 88, 165], [73, 91, 151], [74, 81, 174], [73, 85, 167], [75, 87, 145],
            [74, 80, 180], [74, 92, 167], [75, 88, 156], [74, 84, 180], [74, 90, 166], [76, 92, 151],
            [74, 79, 173], [74, 86, 162], [75, 87, 148], [74, 81, 180], [73, 93, 166], [74, 90, 162],
            [74, 84, 180], [74, 91, 165], [74, 91, 159], [74, 71, 154], [76, 79, 143], [88, 85, 107],
            [74, 82, 162], [74, 87, 152], [86, 84, 131], [74, 81, 166], [74, 80, 153], [85, 76, 132],
            [74, 73, 159], [76, 79, 147], [81, 81, 123], [74, 83, 165], [74, 89, 153], [76, 80, 145],
            [73, 85, 168], [73, 88, 153], [75, 83, 141], [74, 69, 160], [77, 78, 144], [81, 77, 128],
            [75, 82, 172], [74, 89, 155], [74, 83, 150], [75, 85, 174], [73, 89, 156], [73, 87, 146],
            [84, 111, 180], [81, 118, 179], [84, 126, 170], [78, 99, 178], [78, 125, 174], [86, 130, 169],
            [79, 104, 180], [79, 111, 176], [87, 128, 164], [94, 99, 182], [86, 107, 183], [85, 107, 180],
            [81, 88, 189], [78, 111, 181], [83, 110, 185], [82, 89, 188], [78, 108, 183], [82, 111, 182],
            [100, 93, 183], [91, 104, 180], [87, 104, 172], [80, 89, 190], [77, 110, 181], [81, 110, 186],
            [82, 95, 190], [77, 111, 184], [80, 109, 185], [88, 100, 185], [82, 105, 183], [82, 106, 187],
            [80, 85, 189], [77, 112, 181], [81, 112, 183], [81, 87, 187], [76, 107, 182], [80, 105, 180],
            [86, 98, 188], [80, 105, 184], [83, 110, 177], [80, 85, 190], [77, 113, 183], [84, 114, 178],
            [81, 88, 187], [73, 110, 178], [83, 114, 168], [88, 99, 188], [83, 106, 185], [83, 108, 181],
            [80, 86, 189], [77, 114, 182], [83, 114, 180], [80, 87, 188], [76, 111, 181], [81, 116, 172]
        ])
        
        self.white_X = np.array([
            [95, 27, 167], [94, 29, 161], [93, 28, 151], [91, 28, 182],
            [89, 28, 156], [91, 27, 158], [92, 27, 179], [90, 28, 163],
            [89, 27, 156], [95, 26, 170], [96, 28, 160], [94, 28, 146],
            [91, 28, 183], [89, 28, 158], [92, 25, 161], [91, 27, 182],
            [90, 27, 167], [93, 26, 154], [97, 25, 171], [96, 28, 162],
            [95, 27, 149], [92, 27, 184], [89, 28, 158], [90, 26, 161],
            [93, 26, 181], [90, 27, 167], [92, 26, 156], [96, 25, 174],
            [96, 28, 163], [93, 27, 150], [91, 28, 184], [89, 28, 159],
            [91, 26, 159], [92, 26, 182], [90, 27, 169], [92, 27, 153],
            [96, 26, 170], [96, 28, 162], [93, 27, 148], [93, 27, 184],
            [89, 28, 159], [91, 26, 161], [92, 26, 182], [90, 27, 168],
            [91, 26, 156], [94, 26, 176], [93, 27, 167], [95, 26, 151],
            [91, 28, 183], [89, 28, 159], [95, 27, 156], [92, 26, 180],
            [91, 26, 167], [95, 27, 148], [90, 28, 147], [97, 27, 136],
            [97, 26, 156], [99, 30, 141], [105, 36, 116], [92, 30, 166],
            [91, 33, 138], [101, 32, 133], [92, 26, 162], [93, 29, 143],
            [106, 32, 120], [106, 24, 152], [104, 31, 136], [101, 31, 118],
            [96, 26, 169], [92, 28, 141], [94, 27, 143], [94, 25, 167],
            [91, 27, 148], [93, 26, 141], [97, 25, 155], [99, 30, 139],
            [101, 31, 119], [90, 27, 166], [90, 31, 139], [97, 27, 138],
            [90, 25, 165], [90, 28, 146], [96, 26, 134], [104, 23, 149],
            [102, 30, 134], [101, 32, 115], [89, 24, 169], [90, 30, 141],
            [94, 27, 140], [92, 24, 166], [90, 28, 147], [94, 27, 137],
            [93, 26, 159], [95, 28, 145], [99, 29, 127], [90, 27, 166],
            [90, 31, 140], [97, 28, 141], [91, 25, 164], [90, 27, 146],
            [96, 27, 132], [99, 25, 155], [98, 29, 139], [100, 33, 119],
            [92, 26, 168], [90, 30, 140], [96, 29, 140], [90, 25, 166],
            [99, 17, 190], [100, 23, 182], [102, 30, 180], [76, 14, 198],
            [89, 18, 172], [97, 22, 178], [67, 14, 211], [80, 13, 186],
            [91, 18, 181], [101, 17, 190], [101, 23, 182], [100, 26, 185],
            [80, 14, 195], [89, 18, 172], [95, 19, 188], [70, 15, 207],
            [81, 13, 187], [91, 18, 190], [109, 30, 175], [107, 31, 171],
            [104, 37, 171], [80, 14, 196], [90, 17, 173], [98, 20, 182],
            [72, 16, 207], [79, 13, 187], [87, 16, 191], [104, 26, 175],
            [102, 28, 173], [102, 34, 172], [81, 14, 193], [88, 18, 170],
            [96, 21, 178], [71, 16, 204], [79, 13, 187], [88, 15, 191],
            [108, 22, 187], [105, 27, 180], [105, 36, 174], [82, 13, 196],
            [89, 16, 174], [106, 27, 174], [67, 18, 217], [82, 13, 190],
            [102, 21, 177], [105, 29, 173], [103, 28, 173], [102, 34, 173],
            [83, 14, 190], [88, 17, 170], [102, 23, 177], [66, 20, 207],
            [80, 13, 186], [95, 19, 181]
        ])

        # 2. Concatenate data and create labels automatically
        
        # Combine all X data arrays
        self.X = np.concatenate([
            self.red_X,
            self.orange_X,
            self.yellow_X,
            self.blue_X,
            self.green_X, # Must be included even if empty
            self.white_X  # Must be included even if empty
        ])

        # Create the Y labels using the actual length of each X array
        self.y = np.concatenate([
            np.array(['R'] * len(self.red_X)),
            np.array(['O'] * len(self.orange_X)),
            np.array(['Y'] * len(self.yellow_X)),
            np.array(['B'] * len(self.blue_X)),
            np.array(['G'] * len(self.green_X)),
            np.array(['W'] * len(self.white_X))
        ])

        # This check is now guaranteed to pass: len(self.X) == len(self.y)
        print(f"Classifier trained with {len(self.X)} total samples.")

        # 3. Train the classifier

        # Normalize HSV values
        self.X_norm = self.X.astype(float)
        self.X_norm[:, 0] /= 180.0  # Hue (0-180)
        self.X_norm[:, 1] /= 255.0  # Saturation (0-255)
        self.X_norm[:, 2] /= 255.0  # Value (0-255)

        # Initialize and train KNN classifier
        self.knn = KNeighborsClassifier(n_neighbors=3, weights='distance')
        self.knn.fit(self.X_norm, self.y)

    def predict_color(self, hsv):
        """Predict single sticker color"""
        hsv_array = np.array(hsv).reshape(1, -1).astype(float)
        
        print(hsv_array)
        
        # Normalize the input in the same way the training data was normalized
        hsv_array[:, 0] /= 180.0
        hsv_array[:, 1] /= 255.0
        hsv_array[:, 2] /= 255.0
        
        # FIX 3: Ensure this method runs the actual prediction.
        return self.knn.predict(hsv_array)[0]

    def predict_face(self, hsv_face):
        """
        Predict entire face color matrix and perform a center-based majority vote correction.
        hsv_face: 3x3 list of HSV values
        Returns 3x3 list of color letters.
        """
        predicted_face = []
        for row in hsv_face:
            predicted_row = []
            for hsv in row:
                predicted_row.append(self.predict_color(hsv))
            predicted_face.append(predicted_row)
        
        """
        Correction Logic: Use the center sticker's predicted color 
        as the true face color for maximum reliability.
        """
        center_color = predicted_face[1][1]

        """
        Correct all other colors to match the center color.
        This is the most reliable way to enforce that all stickers on one face 
        MUST be the same color (except the center, which identifies the face).
        """
        for i in range(3):
            for j in range(3):
                """
                Skip the center (1, 1) because it's already correct.
                However, forcing everything to the center color is safer for solving.
                """
                predicted_face[i][j] = center_color

        return predicted_face
